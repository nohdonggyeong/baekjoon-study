Union-Find 알고리즘(또는 Disjoint-Set 알고리즘)은 서로소 집합을 다루는데 사용되는 알고리즘입니다. 이 알고리즘은 주로 그래프 이론에서 활용되며, 여러 노드들이 연결되어 있는지 확인하거나, 사이클이 있는지 검사하는 등의 작업에 유용합니다. 아래에는 Union-Find 알고리즘을 Java로 설명한 코드와 함께 간단한 설명을 제시합니다.


class UnionFind {
    private int[] parent;
    private int[] rank;

    public UnionFind(int n) {
        parent = new int[n];
        rank = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            rank[i] = 0;
        }
    }

    public int find(int x) {
        if (parent[x] != x)
            parent[x] = find(parent[x]);
        return parent[x];
    }

    public void union(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);

        if (rootX == rootY) return;

        if (rank[rootX] < rank[rootY]) {
            parent[rootX] = rootY;
        } else if (rank[rootX] > rank[rootY]) {
            parent[rootY] = rootX;
        } else {
            parent[rootY] = rootX;
            rank[rootX]++;
        }
    }
}


위의 코드에서 UnionFind 클래스는 Union-Find 알고리즘을 구현합니다.

parent 배열은 각 노드의 부모를 저장합니다. 초기에는 각 노드가 자신을 가리키고 있습니다.
rank 배열은 각 집합의 깊이를 저장하여 트리의 균형을 유지합니다.
주요 메소드는 다음과 같습니다:

find(int x): 노드 x가 속한 집합의 대표 노드(루트)를 찾습니다. 경로 압축(Path Compression)을 사용하여 재귀적으로 호출된 노드의 부모를 직접 루트에 연결합니다.
union(int x, int y): x가 속한 집합과 y가 속한 집합을 합칩니다. 각 집합의 루트를 찾아 서로 연결하며, 두 집합의 깊이가 같을 때는 한 쪽의 루트를 다른 쪽의 자식으로 만들어줍니다. 이 과정에서 rank 배열을 사용하여 트리의 균형을 유지합니다.
이러한 Union-Find 알고리즘을 사용하면 집합 간의 합집합(union) 및 노드가 어떤 집합에 속해 있는지 확인할 수 있습니다.


백준 온라인 저지(BOJ) 1717번 문제는 "집합의 표현"이라는 문제입니다. 이 문제는 Union-Find 알고리즘을 사용하여 해결할 수 있습니다. 문제를 간단히 설명하면, 두 종류의 연산을 처리해야 합니다.

두 원소가 같은 집합에 포함되어 있는지 확인하는 연산
두 원소가 서로 다른 집합에 포함되어 있는지 확인하고, 필요하다면 두 집합을 합치는 연산
여기서 주어지는 연산은 다음과 같습니다.

합집합 연산: 두 원소를 입력받아 그 두 원소가 속한 집합을 합치는 연산입니다.
확인 연산: 두 원소를 입력받아 그 두 원소가 같은 집합에 속해있는지 확인하는 연산입니다.
아래는 문제를 해결하기 위한 간단한 Java 코드입니다. 이 코드는 Union-Find 알고리즘을 사용하여 문제를 해결합니다.


import java.io.*;
import java.util.*;

public class Main {
    static int[] parent;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());

        parent = new int[n + 1];
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
        }

        for (int i = 0; i < m; i++) {
            st = new StringTokenizer(br.readLine());
            int cmd = Integer.parseInt(st.nextToken());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());

            if (cmd == 0) {
                union(a, b);
            } else {
                if (find(a) == find(b))
                    bw.write("YES\n");
                else
                    bw.write("NO\n");
            }
        }

        bw.flush();
        bw.close();
        br.close();
    }

    static int find(int x) {
        if (parent[x] == x)
            return x;
        return parent[x] = find(parent[x]);
    }

    static void union(int x, int y) {
        x = find(x);
        y = find(y);
        if (x != y)
            parent[y] = x;
    }
}


이 코드는 입력으로 주어지는 연산에 따라서 집합을 합치거나, 두 원소가 같은 집합에 속해있는지 확인합니다. find 함수는 경로 압축을 통해 루트를 찾고, union 함수는 두 집합을 합칩니다.